openapi: 3.0.3
info:
  title: Movie Explorer API
  description: API documentation for the Movie Explorer application, covering User management, Movie management, and Subscription management features.
  version: 1.0.0
  contact:
    email: support@movieexplorer.com
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://movie-explorer-ror-ashutosh-singh.onrender.com
    description: Live production server
paths:
  /users:
    post:
      summary: Register a new User
      description: Creates a new User with the provided details.
      tags:
        - User APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Ashutosh"
                    email:
                      type: string
                      format: email
                      example: "newuser@gmail.com"
                    password:
                      type: string
                      example: "password123"
                    mobile_number:
                      type: string
                      example: "6307341151"
                  required:
                    - name
                    - email
                    - password
                    - mobile_number
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  email:
                    type: string
                    format: email
                    example: "newuser@gmail.com"
                  role:
                    type: string
                    enum: [user, supervisor]
                    example: "user"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9..."
        '422':
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Email has already been taken", "Mobile number is invalid"]

  /users/sign_in:
    post:
      summary: Authenticate a user and return a JWT token
      description: Logs in a user with email and password, returning a JWT token for subsequent requests.
      tags:
        - User APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: "ashutosh@gmail.com"
                    password:
                      type: string
                      example: "password123"
                  required:
                    - email
                    - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  email:
                    type: string
                    format: email
                    example: "ashutosh@gmail.com"
                  role:
                    type: string
                    enum: [user, supervisor]
                    example: "supervisor"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9..."
        '401':
          description: Unauthorized (invalid email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
      security: []

  /users/sign_out:
    delete:
      summary: Sign out the current user
      description: Logs out the current authenticated user, invalidating the JWT token.
      tags:
        - User APIs
      responses:
        '204':
          description: Successfully signed out (No Content)
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
      security:
        - bearerAuth: []

  /api/v1/current_user:
    get:
      summary: Retrieve the current authenticated user
      description: Returns the details of the currently authenticated user.
      tags:
        - User APIs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  email:
                    type: string
                    format: email
                    example: "ashutosh@gmail.com"
                  role:
                    type: string
                    enum: [user, supervisor]
                    example: "supervisor"
                  profile_picture_url:
                    type: string
                    format: uri
                    nullable: true
                    example: "https://res.cloudinary.com/your-cloud-name/image/upload/v1234567890/profile.jpg"
                  profile_picture_thumbnail:
                    type: string
                    format: uri
                    nullable: true
                    example: "https://res.cloudinary.com/your-cloud-name/image/upload/w_100,h_100,c_fill,g_face/v1234567890/profile.jpg"
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
      security:
        - bearerAuth: []

  /api/v1/update_device_token:
    post:
      summary: Update the device token for the current user
      description: Updates the device token for the currently authenticated user to enable push notifications.
      tags:
        - User APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_token:
                  type: string
                  example: "abc123deviceToken"
              required:
                - device_token
      responses:
        '200':
          description: Device token updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Device token updated successfully"
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
      security:
        - bearerAuth: []

  /api/v1/toggle_notifications:
    post:
      summary: Toggle notifications for the current user
      description: Toggles the notifications_enabled flag for the currently authenticated user.
      tags:
        - User APIs
      responses:
        '200':
          description: Notifications toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notifications toggled successfully"
                  notifications_enabled:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
      security:
        - bearerAuth: []

  /api/v1/update_profile_picture:
    post:
      summary: Update the profile picture for the current user
      description: Uploads or replaces the profile picture for the currently authenticated user.
      tags:
        - User APIs
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: Profile picture file (jpg/png)
              required:
                - profile_picture
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  email:
                    type: string
                    format: email
                    example: "ashutosh@gmail.com"
                  role:
                    type: string
                    enum: [user, supervisor]
                    example: "supervisor"
                  profile_picture_url:
                    type: string
                    format: uri
                    nullable: true
                    example: "https://res.cloudinary.com/your-cloud-name/image/upload/v1234567890/profile.jpg"
                  profile_picture_thumbnail:
                    type: string
                    format: uri
                    nullable: true
                    example: "https://res.cloudinary.com/your-cloud-name/image/upload/w_100,h_100,c_fill,g_face/v1234567890/profile.jpg"
        '400':
          description: Bad Request (no file provided)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No profile picture provided"
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '422':
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Profile picture must be a PNG or JPEG"]
      security:
        - bearerAuth: []

  /api/v1/remove_profile_picture:
    post:
      summary: Remove the profile picture for the current user
      description: Removes the profile picture for the currently authenticated user.
      tags:
        - User APIs
      responses:
        '200':
          description: Profile picture removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture removed successfully"
        '400':
          description: Bad Request (no profile picture to remove)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No profile picture to remove"
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
      security:
        - bearerAuth: []

  /api/v1/movies:
    get:
      summary: List all movies with pagination, filtering, and search
      tags:
        - Movie APIs
      parameters:
        - name: query
          in: query
          schema:
            type: string
          description: Search term to find movies by title or description
          example: "Marvel"
        - name: genre
          in: query
          schema:
            type: string
          description: Filter movies by genre
          example: "Action"
        - name: director
          in: query
          schema:
            type: string
          description: Filter movies by director
          example: "Christopher Nolan"
        - name: main_lead
          in: query
          schema:
            type: string
          description: Filter movies by main actor/actress
          example: "Tom Hanks"
        - name: release_year
          in: query
          schema:
            type: integer
          description: Filter movies by release year
          example: 2023
        - name: is_premium
          in: query
          schema:
            type: boolean
          description: Filter movies by premium status
          example: true
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
          example: 10
      responses:
        '200':
          description: Successful response with paginated movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieWithUrls'
                  total_pages:
                    type: integer
                    example: 5
                  current_page:
                    type: integer
                    example: 1
                  per_page:
                    type: integer
                    example: 10
                    description: Number of items per page (as set in the request)
                  total_count:
                    type: integer
                    example: 42
      security: []

    post:
      summary: Create a new movie
      description: Creates a new movie with the provided details (supervisor role required).
      tags:
        - Movie APIs
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  example: "Inception"
                movie[description]:
                  type: string
                  example: "A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O."
                movie[genre]:
                  type: string
                  example: "Sci-Fi"
                movie[director]:
                  type: string
                  example: "Christopher Nolan"
                movie[main_lead]:
                  type: string
                  example: "Leonardo DiCaprio"
                movie[rating]:
                  type: number
                  format: float
                  example: 8.8
                movie[duration]:
                  type: integer
                  example: 148
                movie[release_year]:
                  type: integer
                  example: 2010
                movie[is_premium]:
                  type: boolean
                  example: true
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (jpg/png)
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (jpg/png)
              required:
                - movie[title]
                - movie[description]
                - movie[genre]
                - movie[director]
                - movie[main_lead]
                - movie[rating]
                - movie[duration]
                - movie[release_year]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieWithUrls'
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Only supervisors can create movies"
        '422':
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Title can't be blank", "Rating must be less than or equal to 10"]
      security:
        - bearerAuth: []

  /api/v1/movies/{id}:
    get:
      summary: Get a specific movie by ID
      tags:
        - Movie APIs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the movie to retrieve
          example: 42
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieWithUrls'
        '401':
          description: Unauthorized (not logged in, required for premium movies)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Please log in to access this movie"
        '403':
          description: Forbidden (no active subscription, required for premium movies)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Please purchase an active subscription to access this movie"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
      security: []

    put:
      summary: Update a movie
      description: Updates a movie with the provided details (supervisor role required).
      tags:
        - Movie APIs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the movie to update
          example: 42
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  example: "Inception (Director's Cut)"
                movie[description]:
                  type: string
                  example: "A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O."
                movie[genre]:
                  type: string
                  example: "Sci-Fi"
                movie[director]:
                  type: string
                  example: "Christopher Nolan"
                movie[main_lead]:
                  type: string
                  example: "Leonardo DiCaprio"
                movie[rating]:
                  type: number
                  format: float
                  example: 8.8
                movie[duration]:
                  type: integer
                  example: 148
                movie[release_year]:
                  type: integer
                  example: 2010
                movie[is_premium]:
                  type: boolean
                  example: true
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (jpg/png)
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (jpg/png)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieWithUrls'
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Only supervisors can update movies"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Unprocessable Entity (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Rating must be less than or equal to 10"]
      security:
        - bearerAuth: []

    delete:
      summary: Delete a movie
      description: Deletes a specific movie (supervisor role required).
      tags:
        - Movie APIs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the movie to delete
          example: 42
      responses:
        '204':
          description: Movie successfully deleted (No Content)
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Only supervisors can destroy movies"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
      security:
        - bearerAuth: []

  /api/v1/subscriptions:
    post:
      summary: Create a subscription for the current user
      description: Creates a Stripe Checkout session for the currently authenticated user to subscribe to a plan. The plan type can be 1_day, 7_days, or 1_month.
      tags:
        - Subscription APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_type:
                  type: string
                  enum: [1_day, 7_days, 1_month]
                  example: "1_month"
              required:
                - plan_type
      responses:
        '200':
          description: Stripe Checkout session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    example: "cs_test_..."
                  url:
                    type: string
                    example: "https://checkout.stripe.com/pay/cs_test_..."
        '400':
          description: Bad Request (invalid plan type)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid plan type"
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
      security:
        - bearerAuth: []

  /api/v1/subscriptions/success:
    get:
      summary: Handle successful Stripe payment
      description: Called by Stripe after a successful payment to activate the subscription and set its expiration.
      tags:
        - Subscription APIs
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
          description: The Stripe session ID
          example: "cs_test_..."
      responses:
        '200':
          description: Subscription activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription updated successfully"
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
      security: []

  /api/v1/subscriptions/cancel:
    get:
      summary: Handle cancelled Stripe payment
      description: Called by Stripe if the user cancels the payment.
      tags:
        - Subscription APIs
      responses:
        '200':
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment cancelled"
      security: []

  /api/v1/subscriptions/status:
    get:
      summary: Check the subscription status of the current user
      description: Returns the subscription plan type of the currently authenticated user. If the subscription has expired, it downgrades the plan to 'basic'.
      tags:
        - Subscription APIs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      plan_type:
                        type: string
                        example: "premium"
                    required:
                      - plan_type
                  - type: object
                    properties:
                      plan_type:
                        type: string
                        example: "basic"
                      message:
                        type: string
                        example: "Your subscription has expired. Downgrading to basic plan."
                    required:
                      - plan_type
                      - message
        '401':
          description: Unauthorized (no valid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You need to sign in or sign up before continuing."
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active subscription found"
      security:
        - bearerAuth: []

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: "Ashutosh"
        email:
          type: string
          format: email
          example: "ashutosh@gmail.com"
        mobile_number:
          type: string
          example: "6307341151"
        role:
          type: string
          enum: [user, supervisor]
          example: "supervisor"
        notifications_enabled:
          type: boolean
          example: false
        device_token:
          type: string
          example: "abc123deviceToken"
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2025-04-30T14:47:25Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-04-30T14:47:25Z"
      required:
        - id
        - name
        - email
        - mobile_number
        - role
        - notifications_enabled
        - created_at
        - updated_at

    Subscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 3
        plan_type:
          type: string
          example: "premium"
        status:
          type: string
          example: "active"
        stripe_customer_id:
          type: string
          example: "cus_..."
          nullable: true
        stripe_subscription_id:
          type: string
          example: "sub_..."
          nullable: true
        expires_at:
          type: string
          format: date-time
          example: "2025-06-12T12:00:00Z"
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2025-05-12T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-12T12:00:00Z"
      required:
        - id
        - user_id
        - plan_type
        - status
        - created_at
        - updated_at

    Movie:
      type: object
      properties:
        id:
          type: integer
          example: 42
        title:
          type: string
          example: "Inception"
        description:
          type: string
          example: "A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O."
        genre:
          type: string
          example: "Sci-Fi"
        director:
          type: string
          example: "Christopher Nolan"
        main_lead:
          type: string
          example: "Leonardo DiCaprio"
        rating:
          type: number
          format: float
          example: 8.8
        duration:
          type: integer
          example: 148
        release_year:
          type: integer
          example: 2010
        is_premium:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-05-08T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-08T12:00:00Z"
      required:
        - id
        - title
        - description
        - genre
        - director
        - main_lead
        - rating
        - duration
        - release_year
        - is_premium
        - created_at
        - updated_at

    MovieWithUrls:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            banner_url:
              type: string
              format: uri
              nullable: true
              example: "https://movie-explorer-ror-ashutosh-singh.onrender.com/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--3a5a7c5ad15d5c33f96a2bb2aad62f90b4679a0e/banner.jpg"
            poster_url:
              type: string
              format: uri
              nullable: true
              example: "https://movie-explorer-ror-ashutosh-singh.onrender.com/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--7f3d90eaa2065fa2ae9c8a609a3f4f36a15bf716/poster.jpg"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT